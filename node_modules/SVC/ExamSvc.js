var db = require('DB').DB;
var async = require('async');
var _ = require('underscore');
var ExamSvc = exports.ExamSvc = {
    getUserExams: function (userID, callback) {
        async.waterfall(
            [
                function (wcb) {
                    //用户角色集合
                    db.Role.find({UserIDs: userID}, {Name: 1}).toArray(function (e, ds) {
                        ds = _.map(ds, function (i) {return i._id;});
                        wcb(null, ds);
                    });
                },
                function (rids, wcb) {
                    //培训计划集合
                    //rids = rids.join(',');
                    db.TrainningPlan.find({RoleIDs: rids}, {Name: 1}).toArray(function (e, ds) {
                        ds = _.map(ds, function (i) {return i._id});
                        wcb(null, ds);
                    })
                },
                function (pids, wcb) {
                    db.ExamLog.find({'Owner._id': userID}, {ExamID: 1}).toArray(function (e, ds) {
                        var logs = _.map(ds, function (di) {return di.ExamID});
                        wcb(null, pids, logs)
                    });
                },
                function (pids, completeExamIDs, wcb) {
                    db.ExamDefine.find({_id: {$nin: completeExamIDs}, 'Plan.Value': {$in: pids}}, {Name: 1}).toArray(wcb);
                }

            ],
            function (e, ds) {
                callback(e, ds);
            })
    },
    /**
     * 记录考试日志
     * @param {Object} 考试人 {_id:String,Name:String}
     * @param {String} 考试定义ID
     * @param {String} 考试结果 {TotalScore:总分,Score:得分,ScoreRate:得分率}
     * @param {Function} 回调(error,ExamLog)
     */
    log: function (owner, examDefineID, result, callback) {
        db.ExamLog.findOne({'Owner._id': owner._id, ExamID: examDefineID}, function (e, d) {
            if (d) {
                d.CompleteTime = Date.ToDateTimeString(null, true);
                d.Result = result;
                db.ExamLog.update({_id: d._id}, {$set: {CompleteTime: d.CompleteTime, Result: d.Result}}, function(e){callback(e, d)});
            }
            else {
                var log = {_id: db.ExamLog.ObjectID().toString(), ExamID: examDefineID, Owner: owner, CompleteTime: Date.ToDateTimeString(null, true), Result: result};
                db.ExamLog.insert(log, function(e,ds){ callback(e, ds[0])});
            }
        });
    },
    /**
     * 获取考试题集合
     * @param {String} 考试定义Id
     * @param {Function} 回调(error,考试题集合)
     */
    getExamQuestions: function (examDefineID, callback) {
        async.waterfall(
            [
                function (wcb) {
                    db.ExamDefine.findOne({_id: examDefineID}, function (e, d) {
                        wcb(null, d.Items);
                    });
                },
                function (qts, wcb) {
                    var dids = _.map(qts, function (i) {
                        return i._id;
                    });
                    var qids = [];
                    db.Question.find({DefineID: {$in: dids}}, {DefineID: 1}).toArray( function (e, ds) {
                        //问题类型遍历
                        _.each(qts, function (di) {
                            var ids = _.filter(ds, function (qi) {
                                return qi.DefineID== di._id
                            });
                            if (ids.length <= di.Value) { //问题数小于 设定数
                                qids = _.union(qids, _.map(function (qi) {
                                    return qi._id
                                }))
                            }
                            else {
                                var rss = _.chain(ids).map(function (i) {return i._id}).sample(di.Value).value(); //随机问题 id
                                qids = _.union(qids, rss);
                            }
                        });
                        wcb(null, qids);
                    });
                },
                function (qids, wcb) {
                    db.Question.find({_id: {$in: qids}}).toArray(  wcb);
                }
            ],
            function (e, ds) {
                callback(e, ds)
            }
        )
    }
}
