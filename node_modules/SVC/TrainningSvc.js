var db = require('DB').DB;
var async = require('async');
var _ = require('underscore');
var TrainningSvc = {
    getUserTrainningKnowledges: function (userID, callback) {
        getUserPlans(userID, function (re, plans) {
            if (plans.length == 0) {
                callback(re, []);
            }
            else {
                async.waterfall(
                    [
                        function (wcb) {
                            //相关培训计划id集合
                            var tpids = _.map(plans, function (i) {return i._id;});
                            //已完成的知识id集合
                            db.TrainningLog.find({'Owner._id': userID, PlanID: {$in: tpids}}, {Knowledges: 1}).toArray(function (e, logs) {
                                var ckids = _.chain(logs)
                                    .map(function (i) {return _.map(i.Knowledges, function (kki) {return kki._id})})
                                    .flatten()
                                    .uniq()
                                    .value();
                                wcb(null, ckids);
                            })
                        },
                        function (cmpleteids, wcb) {
                            var kdids = _.chain(plans)
                                .map(function (i) {return i.KnowledgeDefineIDs})
                                .flatten()
                                .uniq()
                                .value();
                            db.Knowledge.find({"Define.Value": {$in: kdids} }, {Define: 1, Name: 1 }).toArray(function (e, ds) {
                                _.each(ds, function (ki) {
                                    ki.flag = _.any(cmpleteids, function (ci) {return ci == ki._id}) ? 1 : 0; //已完成flag=1,否则flag=0
                                });
                                wcb(e, ds);
                            })
                        }
                    ],
                    function (e, ds) {
                        callback(e, ds);
                    }
                )
            }
        });
    },
    log: function (owner, knowledgeID, callback) {
        async.parallel(
            {
                plans: function (cb) { getUserPlans(owner._id, cb)},
                knowledge: function (cb) { db.Knowledge.findOne({_id: knowledgeID}, {Define: 1}, cb); }
            },
            function (e, result) {
                var pls = _.filter(result.plans, function (i) { return _.any(i.KnowledgeDefineIDs, function (di) { return di == result.knowledge.Define.Value})});
                var pids = _.map(pls, function (i) {return i._id});
                async.waterfall(
                    [
                        function (wcb) {
                            db.TrainningLog.find({'Owner._id': owner._id, PlanID: {$in: pids}}).toArray(wcb); //培训日志
                        },
                        function (logs, wcb) {
                            async.each(pids, function (planID, ecb) {
                                var log = _.find(logs, function (li) { return li.PlanID == planID}); //培训计划日志
                                if (log == undefined) { //无日志
                                    log = {_id: '', Knowledges: [], PlanID: planID, Owner: owner};
                                }
                                var k = _.find(log.Knowledges, function (ki) {return ki._id == knowledgeID});
                                if (k == undefined) {
                                    k = {_id: knowledgeID, Times: 0};
                                    log.Knowledges.push(k)
                                }
                                k.Times++;
                                k.LastTime = Date.ToDateTimeString(null, true);
                                if (log._id == '') {
                                    log._id = db.TrainningLog.ObjectID().toString();
                                    db.TrainningLog.insert(log, ecb)
                                }
                                else {
                                    db.TrainningLog.update({_id: log._id}, {$set: {Knowledges: log.Knowledges} }, ecb)
                                }
                            }, wcb);
                        }
                    ],
                    function (e) {
                        callback(e);
                    }
                )
            }
        )
    }
}
function getUserPlans(userID, callback) {
    async.parallel(
        {
            roles: function (cb) {
                //用户所有角色
                db.Role.find({UserIDs:userID}).toArray(cb)
            },
            plans: function (cb) {
                //未完结培训计划
                db.TrainningPlan.find({$where:'this.ETime>="'+Date.ToDateTimeString()+'"'}).toArray(cb)
            }
        },
        function (e, result) {
            //角色相关培训计划集合
            var tps = _.filter(result.plans, function (i) {
                return _.any(i.RoleIDs, function (ri) {
                    return _.any(result.roles,function (lli){return lli._id ==ri});
                });
            });
            callback(e, tps)
        }
    );
}
exports.TrainningSvc = TrainningSvc;